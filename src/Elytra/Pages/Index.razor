@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

<div class="flex bg-stone-400 w-screen h-screen" @onkeydown="@Enter">
    <div id="input" class="absolute bottom-0 m-5 flex flex-row">
        <ul id="messagesList">
            @foreach (var message in messages)
            {
                <li>@message</li>
            }
        </ul>        
        <input @bind-value="userInput" type="text" placeholder="User" class="text-sm rounded-lg block w-full p-2.5 bg-stone-700 placeholder-stone-100 text-white ring-stone-500" required/>
        <input @bind-value="messageInput" type="text" placeholder="Message" class="text-sm rounded-lg block w-full p-2.5 bg-stone-700 placeholder-stone-100 text-white ring-stone-500" required>
        <button @onclick="Send" disabled="@(!IsConnected)">Send</button>
    </div>
</div>




@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("http://192.168.178.136:5135/chat")
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });
        await hubConnection.StartAsync();
    }

    private async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Send();
        }
    }

    private async Task Send()
    {
        if (hubConnection is not null || string.IsNullOrEmpty(messageInput))
        {
            StateHasChanged();
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
            messageInput = string.Empty;
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}


