@page "/"
@using Elytra.DebugUtils;
@using Elytra.Domain.Models;
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net
@using System.Net.Sockets
@using System.Reflection.Metadata
@using Microsoft.VisualBasic.CompilerServices
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>


<div @onkeydown="@Enter" class="flex flex-col ">
    <div class="flex flex-col flex-grow bg-neutral-700 overflow-hidden w-full h-screen">
        <div class="flex flex-col flex-grow p-2 overflow-y-auto h-96 text-neutral-100">
            <ul id="messageList">
                @foreach (var message in messages)
                {
                    <div class="flex">
                        <div class="py-2 px-3">
                            <p class="text-sm text-violet-600">
                                @message.User.Username
                                <span class="text-xs text-neutral-200">@message.TimeStamp</span>
                                <span class="text-xs text-neutral-200 text-red-600 hover:cursor-pointer hover:text-red-400" @onclick="((async) => Delete(message))">Delete</span>
                            </p>
                            <p class="text-sm mt-1">
                                @message.MessageText
                            </p>
                        </div>
                    </div>
                }
            </ul>
        </div>

        <div class="m-3">
            <input @bind-value="messageInput" @bind-value:event="oninput" class="flex items-center h-10 w-full bg-neutral-800 rounded px-3 text-sm focus:outline-none text-neutral-200" type="text" placeholder="Message">
        </div>
    </div>
</div>


@code {
    private HubConnection? hubConnection;
    private readonly List<Message> messages = new();
    private string? messageInput;
    private User user = new() { Username = "Test" };


    protected override async Task OnInitializedAsync()
    {
        string localipv4 = IPUtil.GetLocalIPAddress();

        hubConnection = new HubConnectionBuilder()
            .WithUrl("http://" + localipv4 + ":5135/chat")
            .Build();

        //Use hub get all messages
        hubConnection.On<List<Message>>("GetMessages", (Messages) =>
        {
            messages.AddRange(Messages);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<Message>("ReceiveMessage", (Message) =>
        {
            var encodedMsg = $"{Message.MessageText}";
            messages.Add(Message);
            InvokeAsync(StateHasChanged);
        });
        await hubConnection.StartAsync();
        await hubConnection.SendAsync("GetMessages");
    }

    private async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code is "Enter" or "NumpadEnter")
        {
            await Send();
        }
    }

    private async Task Send()
    {
        if (string.IsNullOrEmpty(messageInput)) return;
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", new Message { MessageText = messageInput, TimeStamp = DateTime.Now, User = user });
            messageInput = string.Empty;
        }
    }

    //I think we need to change this up, need to learn SignalR for real!!!
    private async Task Delete(Message message)
    {
        if (message is null) return;
        await hubConnection.SendAsync("DeleteMessage", message);
        messages.Remove(message);
        StateHasChanged();
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}