@page "/"
@using Elytra.Domain.Models;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

<div @onkeydown="@Enter" class="flex flex-col items-center justify-center w-screen min-h-screen text-neutral-200">
    <div class="flex flex-col flex-grow w-screen bg-neutral-800 overflow-hidden">
        <div class="flex flex-col flex-grow p-2">
            <ul id="messageList">
                @foreach (var message in messages)
                {
                    <div class="flex">
                        <div class="py-2 px-3">
                            <p class="text-sm text-violet-600">
                                @message.User.Username <span class="text-xs text-neutral-200">@message.TimeStamp</span>
                            </p>
                            <p class="text-sm mt-1">
                                @message.MessageText
                            </p>
                        </div>
                    </div>
                }
            </ul>
        </div>

        <div class="p-4">
            <input @bind-value="messageInput" @bind-value:event="oninput" class="flex items-center h-10 w-full bg-neutral-700 rounded px-3 text-sm focus:outline-none text-neutral-200" type="text" placeholder="Message">
        </div>
    </div>
</div>

@code {
    private HubConnection? hubConnection;
    private List<Message> messages = new List<Message>();
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("http://192.168.178.136:5135/chat")
            .Build();

        //Use hub get all messages
        hubConnection.On<List<Message>>("ReceiveMessages", (Messages) =>
        {
            messages.AddRange(Messages);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<Message>("ReceiveMessage", (Message) =>
        {
            var encodedMsg = $"{Message.MessageText}";
            messages.Add(Message);
            InvokeAsync(StateHasChanged);
        });
        await hubConnection.StartAsync();
        await hubConnection.SendAsync("GetMessages");
    }

    private async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Send();
        }
    }

    private async Task Send()
    {
        if (string.IsNullOrEmpty(messageInput)) return;
        if (hubConnection is not null)
        {
            StateHasChanged();
            await hubConnection.SendAsync("SendMessage", new Message { Id = 0, MessageText = messageInput, TimeStamp = DateTime.Now, User = new User { Username = "Test", Id = 0 } });
            messageInput = string.Empty;
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}


